KATO KOULULLA:
	-MITEN MUILLA TOIMII high_value mappi Vs oma

	- TSEKKAA ET MAKEFILE JA FDF_H ON OKAY
	-Koita näitä:

	-Wall -Wextra -Werror -ansi -pedantic -Wshadow -Wno-missing-noreturn \
			-Wno-padded -Wno-unreachable-code -Wredundant-decls \
			-Wmissing-declarations


KOULULLA TSEKATTU:

- kaikissa LEAKS OK (maps, test_maps, easy_test_maps)



FUCK YOU KAIKKI TOIMIISAATANA

To DO:
- lineclipperin matikka uusiks ja sitä muutenki pitää tsekkailla



TATA EN SALEE JAKSA TEHA KOSKA IHA PERSEESTA
EI TOIMI (HIMASSA)
- high_value max int ei näy mutta saa näkyviin jos projection = 0
 MAXIIN SYY ON ETTÄ MAX KERROTAAN JA SIT MENNÄÄ YLI MAX INTEGERIN JOSSAIN VÄLISSÄ JA KAIKKI VITURALLEEN
VERTAA high_value ja high_value2

FINAL CHECKIT:

- TSEKKAA ET MAKEFILE JA FDF_H ON OKAY
- CHEKKAA IHAN VITTU KAIKKI MAPIT JA LEAKIT MITÄ VOI IKINÄ (4h)

- KATSO ALHAALTA:
- READERISSA: FREE Line?!?!? dunno whatsup tsekkaa koululla
- Chekkaa kontrollit et ne on oikeet koululla
- Jhakonie lista (alhaalla)
- TSEKKAA ET MAKEFILE JA FDF_H ON OKAY

_>>>>>>>>>>>>> DONE



ei toimi: 
- low_value
- high_value
- pyramide (hexa) toimii (hard codattu)
- ei piirrä joka ikist pixelii)
	- ehkä koska ne vitun viivat on vinoi (eli salee deltax/y kusee super skidisti?))
- ft_atoi (LONG LONG)
- leaks jos asettaa img-> == NULL tms paskaa



-map with max int/min int
-map with a very low and a very high value in the same map
-map with all values really high or low 

-add "system(“leaks fdf”);" before every exit, run fdf with valid and invalid maps from 2.


Pitäskö print_errorii pistää t_mlx *mlx jotta sen voi free:aa???
leakit tsekattu aika hyvin kanssa
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- hiffaa geometria (leija)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Normi OOOOKKKOOO

FINAL CHECKIT:

- TSEKKAA ET MAKEFILE JA FDF_H ON OKAY
- CHEKKAA IHAN VITTU KAIKKI MAPIT JA LEAKIT MITÄ VOI IKINÄ (4h)

- KATSO ALHAALTA:
- READERISSA: FREE Line?!?!? dunno whatsup tsekkaa koululla
- Chekkaa kontrollit et ne on oikeet koululla
- Jhakonie lista (alhaalla)
- TSEKKAA ET MAKEFILE JA FDF_H ON OKAY

_>>>>>>>>>>>>> DONE


//https://www.quora.com/How-do-you-mathematically-spin-a-square
//https://pbs.twimg.com/media/EePmmJfXoAU9xOn.jpg?name=orig#@troll_lock
//https://pbs.twimg.com/media/EcAQgNBXkAAEMNy.jpg?name=orig#@troll_lock


TO DO LIST:


In case someone needs inspiration on what to check for fdf before returning it, here's the minimum I’d check if I were to do a pre-eval: 

1. Pre-reqs: 
-NORMINETTE, also the obvious fails from the norm pdf that need to be manually checked like header: no unused includes or function prototypes/structs and that there are no "2 instruction in one line" (for example ‘variable = function(variable++);’) 
-Makefile rules and relinking, make sure to run ‘make’ (no unnecessary recompile or relink) and ‘make re’ twice in a row 

2.  Try to read: 
-empty file
-file with just newlines
-file with just newlines and spaces/tabs
-file with just spaces 
-file with just tabs
-fdf executable file (./fdf fdf) 
-Makefile
-a directory 
-a valid map with no access rights
-too many/few args

3. Modify a map: 
-only one point
-only 2 points
-map with uneven lines
-map with random characters (ascii and non) 
-map with max int/min int
-map with a very low and a very high value in the same map
-map with all values really high or low 
-map with some empty lines in between lines
-map with some/all spaces replaced by newlines/tabs  

4. Memory handling:
-run leaks while fdf is running, use all user controls (for example zoom) 
-add -fsanitize=address to libft's and fdf's makefile (see Satu's forum post), run fdf, use all user controls and move the map outside the window 
-add "system(“leaks fdf”);" before every exit, run fdf with valid and invalid maps from 2.

  5. Drawing: 
-there seem to be no pixels missing from the lines drawn
-the original aspect ratio of the map is intact (the 42 map should have a height difference of 10), user can modify it to look nicer, but you should be able to represent the original map 
-there are at least 2 different projections

6. Smoothness(?):
-copy the map of mars 6 times (or world map etc., found one in sadawi's github) in one file and see that it still runs nicely

7. There can be no segfault, ever, lines must be drawn, almost everything else is up to you!






/*if (ln.region1 == 0 && ln.region2 == 0)
		return (1);
	return (0);*/

/*
int	cohen_sutherland_lineclip(t_vector *vector1, t_vector *vector2)
{
	t_vector	tmp_vec;
	int			region_vec1;
	int			region_vec2;
	int			draw_routine;

	region_vec1 = bitwise_vector_region(vector1->x, vector1->y);
	region_vec2 = bitwise_vector_region(vector2->x, vector2->y);
	while ((region_vec1 | region_vec2) != 0 && (region_vec1 & region_vec2) == 0)
	{
		if (region_vec1 > 0)
			draw_routine = region_vec1;
		else
			draw_routine = region_vec2;
		tmp_vec = line_segment(tmp_vec, vector1, vector2, draw_routine);
		if (draw_routine == region_vec1)
		{
			vector1->x = tmp_vec.x;
			vector1->y = tmp_vec.y;
			region_vec1 = bitwise_vector_region(vector1->x, vector1->y);
		}
		else
		{
			vector2->x = tmp_vec.x;
			vector2->y = tmp_vec.y;
			region_vec2 = bitwise_vector_region(vector2->x, vector2->y);
		}
	}
	if (region_vec1 == 0 && region_vec2 == 0)
		return (1);
	return (0);
}
*/



/*	if (draw_routine & 1)
	{
		tmp_vec.x = p1->x + (p2->x - p1->x) * (WIN_HEIGHT - p1->y) / (p2->y - p1->y);
		tmp_vec.y = WIN_HEIGHT;
	}
	else if (draw_routine & 2)
	{
		tmp_vec.x = p1->x + (p2->x - p1->x) * -p1->y / (p2->y - p1->y);
		tmp_vec.y = 0;
	}
	else if (draw_routine & 4)
	{
		tmp_vec.x = WIN_WIDTH;
		tmp_vec.y = p1->y + (p2->y - p1->y) * (WIN_WIDTH - p1->x) / (p2->x - p1->x);
	}
	else if (draw_routine & 8)
	{
		tmp_vec.x = 0;
		tmp_vec.y = p1->y + (p2->y - p1->y) * -p1->x / (p2->x - p1->x);
	}*/

	/*if (y > WIN_HEIGHT)
		vector_region = 1;
	else if (y < 0)
		vector_region = 2;
	if (x > WIN_WIDTH)
		vector_region = 4;
	else if (x < 0)
		vector_region = 8;*/

	/*region_vec1 = 0;
	region_vec2 = 0;
	if (vector1->y > WIN_HEIGHT)
		region_vec1 |= 1;
	else if (vector1->y < 0)
		region_vec1 |= 2;
	if (vector1->x > WIN_WIDTH)
		region_vec1 |= 4;
	else if (vector1->x < 0)
		region_vec1 |= 8;
	if (vector2->y > WIN_HEIGHT)
		region_vec2 |= 1;
	else if (vector2->y < 0)
		region_vec2 |= 2;
	if (vector2->x > WIN_WIDTH)
		region_vec2 |= 4;
	else if (vector2->x < 0)
		region_vec2 |= 8;*/

	//draw_routine = region_vec1 ? region_vec1 : region_vec2;
	//while (!(!(region_vec1 | region_vec2) || (region_vec1 & region_vec2)))
	//return (!(region_vec1 | region_vec2));
	//if (region_vec1 != 0 && region_vec2 != 0)
